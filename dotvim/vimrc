""""""""""""""""
" => vimrc
""""""""""""""""

set nocompatible              " be iMproved

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" KEEP AT TOP
let mapleader = ","
let g:mapleader = ","
let g:C_MapLeader = ','

" => Vundle {{{
filetype plugin on                  " required!
" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
	echo "Installing Vundle.."
	echo ""
	silent !mkdir -p ~/.vim/bundle
	silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
	let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

	Bundle 'gmarik/vundle'
	Bundle 'tpope/vim-fugitive'
	Bundle 'tpope/vim-unimpaired'
	Bundle 'Lokaltog/vim-easymotion'
	Bundle 'nathanaelkane/vim-indent-guides' 
	Bundle 'bling/vim-airline'
	Bundle 'MarcWeber/vim-addon-mw-utils'
	Bundle 'tomtom/tlib_vim'
	Bundle 'garbas/vim-snipmate'
	Bundle 'mwpher/c.vim'
	Bundle 'delimitMate.vim'
	Bundle 'scrooloose/syntastic'
	Bundle 'zah/nimrod.vim'
	Bundle 'rcs.vim'
	Bundle 'chase/vim-ansible-yaml'
	Bundle 'scrooloose/nerdtree'
	Bundle 'kien/ctrlp.vim'
	Bundle 'Shougo/neocomplcache.vim'
	Bundle 'mbbill/undotree'
	Bundle 'junegunn/vim-easy-align'
	Bundle 'gitv'
	Bundle 'vim-pandoc/vim-pandoc'
	Bundle 'vim-pandoc/vim-pandoc-syntax'
	Bundle 'vim-pandoc/vim-pandoc-after'
	Bundle 'mwpher/vim-snippets'
	Bundle 'dbext.vim'
	Bundle 'saltstack/salt-vim'
	Bundle 'mitsuhiko/vim-jinja'
if iCanHazVundle == 0
	echo "Installing Bundles, please ignore key map error messages"
	echo ""
	:BundleInstall
endif
" Setting up Vundle - the vim plugin bundler

filetype plugin indent on     " required!
syntax on

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed. }}}


" => General {{{
" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread


" Fast saving
nmap <leader>w :w!<cr>

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1
" }}}

" => Colors and Fonts {{{
try
    colorscheme desert
catch
endtry

set background=dark

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac
" }}}

" => Visual mode related {{{
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256
" colours)
set t_Co=256

" Enable auto folding
set foldmethod=marker

" Uncomment the following to have Vim jump to the last position when 
" reopening a file if has("autocmd")
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Enable line numbers
set nu
" }}}

"""""""""""""""""
" => My tweaks  "
"""""""""""""""""

" => Tab settings {{{
au BufRead,BufNewFile *.c set expandtab tabstop=4 shiftwidth=4
au BufRead,BufNewFile Makefile,makefile,*.mk set noexpandtab tabstop=4 shiftwidth=4

" Make vim recognize .md as markdown
au BufRead,BufNewFile *.md set filetype=markdown

" force .h files to be C, not CPP
au BufRead,BufNewFile *.h set filetype=c

" Ruby
au BufRead,BufNewFile *.pp set filetype=ruby
au BufRead,BufNewFile *.pp set expandtab tabstop=2 shiftwidth=2

" Yaml (ansible)
au BufRead,BufNewFile *.yml set expandtab tabstop=2 shiftwidth=2

" Python
au BufRead,BufNewFile *.py set expandtab tabstop=2 shiftwidth=2
" }}}

" Automatically set working directory
set autochdir

" Easier window switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Longer timeout
set timeoutlen=4000

" => c.vim {{{
let g:C_CCompiler='clang'
" strict compiler settings
let g:C_CFlags='-Weverything -Wno-unused-parameter -Wno-vla -std=c99 -ggdb3 -O0 -D_FORTIFY_SOURCE=2 -fstack-protector-all -c'
let g:C_LFlags='-Weverything -Wno-unused-parameter -std=c99 -ggdb3 -O0'
" libraries
let g:C_Libs='-lm -lmatt -lcrypt'
let g:C_CplusLibs='-lm'
" }}}

" => Auto-reload vimrc {{{
"augroup myvimrc
"    au!
"    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
"augroup END
" }}}

" easy tab switching and rearranging {{{
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>
" }}}

" Stuff for nimrod.vim {{{
fun! JumpToDef()
  if exists("*GotoDefinition_" . &filetype)
    call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endf
" Jump to tag
nn <M-g> :call JumpToDef()<cr>
ino <M-g> <esc>:call JumpToDef()<cr>i
" }}}


"clear last search
nnoremap <CR> :noh<CR><CR>

" show code that's going on too long
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" Keep Vim from freaking out
set shell=bash

" File completion - unnecessary with neocomplete
"imap <F3> <C-n>
"imap <F4> <C-f>
"imap <F5> <C-x><C-f>

" Settings for backup & undo files {{{
set backup
set writebackup
set undofile

" Make directories {{{
function! InitializeDirectories()
	let separator = "."
	let parent = $HOME 
	let prefix = '.vtmp'
	let dir_list = { 
				\ 'backup': 'backupdir', 
				\ 'views': 'viewdir', 
				\ 'undo': 'undodir' }

	let directory = parent . '/' . prefix . '/'
	if exists("\*mkdir")
		if !isdirectory(directory)
			call mkdir(directory)
		endif
	endif
	for [dirname, settingname] in items(dir_list)
		let directory = parent . '/' . prefix . '/' . dirname . "/"
		if exists("\*mkdir")
			if !isdirectory(directory)
				call mkdir(directory)
			endif
		endif
		if !isdirectory(directory)
			echo "Warning: Unable to create backup directory: " .
			directory
			echo "Try: mkdir -p " . directory
		else  
			let directory = substitute(directory, " ", "\\\\\\\\ ", "")
			exec "set " . settingname . "=" . directory
		endif
	endfor
endfunction
call InitializeDirectories() 
" }}} }}}

" Neocomplete settings {{{
" Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use neocomplcache.
"let g:neocomplcache_enable_at_startup = 1
"" Use smartcase.
"let g:neocomplcache_enable_smart_case = 1
"
"" Define keyword.
"if !exists('g:neocomplcache_keyword_patterns')
""    let g:neocomplcache_keyword_patterns = {}
"endif
"let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
"
"" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplcache#undo_completion()
"inoremap <expr><C-l>     neocomplcache#complete_common_string()
"
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
"  return neocomplcache#smart_close_popup() . "\<CR>"
"  " For no inserting <CR> key.
"  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
"endfunction
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplcache#close_popup()
"inoremap <expr><C-e>  neocomplcache#cancel_popup()
"
"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
"" Enable heavy omni completion.
""if !exists('g:neocomplcache_force_omni_patterns')
""  let g:neocomplcache_force_omni_patterns = {}
""endif
""let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
""let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
""let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"" }}}

" fugitive.vim statusbar icon {{{
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
" }}}

" SnipMate settings
let g:snips_author = "Matthew Pherigo"
let g:snips_email = "hybrid120@gmail.com"
let g:snips_github = "github.com/mwpher"

" create parent directories {{{
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
" }}}

" Easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" Pandoc settings {{{
"let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#formatting#mode = 'ha'
let g:pandoc#syntax#conceal#use = 0
let g:pandoc#after#modules#enabled = ["snipmate"]
let g:pandoc#keyboard#sections#header_style = "s"
"}}}

" Clear search with Ctrl-C
nnoremap <C-c> :let @/ = ""<return>
